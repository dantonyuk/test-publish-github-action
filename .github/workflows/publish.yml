name: Publish Test

on:
  push:
    branches:
      - master
  issue_comment:
    types:
      - created

  workflow_dispatch:
    inputs:
      version:
        description: Version (leave empty to get it from the sources)
        required: false
        default: ""

jobs:
  info:
    runs-on: ubuntu-latest
    steps:
      - name: Info
        run: |
          echo ACTION: ${{ github.event_name }}
  publish:
    if: ${{ github.event.issue.pull_request || contains(['push', 'workflow_dispatch'], github.event_name) }}
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write
    #   contents: write
    #   issues: write
    #   pull-requests: write
    steps:
    - uses: actions/checkout@v3

    - name: Determine Version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "issue_comment" ]
        then
          echo "${{ github.event.comment.body }}"
          if [[ "${{ github.event.comment.body }}" =~ ^/(snapshot|release)[[:space:]]+([^[:space:]]*)$ ]]
          then
            version=${BASH_REMATCH[2]}
            if [ "${BASH_REMATCH[1]}" = "snapshot" ]
            then
              IS_SNAPSHOT=yes
            fi
          fi
        fi

        [ -z "${version}" ] && source gradle.properties
        [ -n "${IS_SNAPSHOT}" ] && version=${version}-SNAPSHOT
        echo "::set-output name=value::${version}"
        echo "VERSION: $version"
      env:
        version: ${{ github.event.inputs.version }}

    - name: Publish
      id: publish
      run: |
        echo "Publishing..."

    - name: Tag Release
      if: steps.publish.outcome == 'success'
      run: |
        [ -z "${version}" ] && source gradle.properties
        TAG=v-${{ steps.version.outputs.value }}
        git tag ${TAG}
        git push origin ${TAG}

    - uses: actions/github-script@v6
      if: ${{ github.event_name == 'issue_comment' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.createComment({
            issue_number: ${{ github.event.number }}
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸ‘‹ Version ${{ steps.version.outputs.value }} has been successfully released'
          })
