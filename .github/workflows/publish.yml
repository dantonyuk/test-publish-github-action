name: Publish Test

on:
  push:
    branches:
      - master
  issue_comment:
    types:
      - created

  workflow_dispatch:
    inputs:
      version:
        description: Version (leave empty to get it from the sources)
        required: false
        default: ""

jobs:
  info:
    runs-on: ubuntu-latest
    steps:
      - name: Info
        run: |
          echo ACTION: ${{ github.event_name }}
          env
          echo "$GITHUB_CONTEXT"
          which gh
          which hub
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
  publish:
    if: |
      (github.event.issue.pull_request && (
        startsWith(github.event.comment.body, '/snapshot') ||
        startsWith(github.event.comment.body, '/release'))) ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write
    #   contents: write
    #   issues: write
    #   pull-requests: write
    steps:
      - name: üåµ Identify PR Head
        id: pr-head
        uses: actions/github-script@v6
        if: github.event.issue.pull_request
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
                pull_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
            });

            core.setOutput("ref", pr.head.ref);
            core.setOutput("sha", pr.head.sha);

      - name: üì© Fetch Sources
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.pr-head.outputs.ref }}

      - name: ü§π Identify Artifact Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]
          then
            if [[ "${{ github.event.comment.body }}" =~ ^/(snapshot|release)([[:space:]]+([^[:space:]]*))?$ ]]
            then
              version=${BASH_REMATCH[3]}
              if [ "${BASH_REMATCH[1]}" = "snapshot" ]
              then
                IS_SNAPSHOT=yes
              fi
            else
              exit 100
            fi
          fi

          [ -z "${version}" ] && source gradle.properties
          [ -n "${IS_SNAPSHOT}" ] && version=${version}-SNAPSHOT
          echo "::set-output name=value::${version}"
          echo "VERSION: $version"
        env:
          version: ${{ github.event.inputs.version }}

      - name: üì¢ Start Notification (PR)
        id: notify
        uses: actions/github-script@v6
        if: github.event_name == 'issue_comment'
        with:
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body:
                `‚òï Version ${process.env.VERSION} is getting published...\n` +
                `üèÉ [Action Run](${context.payload.repository.html_url}/actions/runs/${process.env.GITHUB_RUN_ID})`
            });

            core.setOutput("comment-id", comment.id);

            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Publish",
              head_sha: process.env.HEAD_SHA,
              status: 'in_progress', 
              external_id: process.env.GITHUB_RUN_ID,
              output: {
                title: 'Publish an Artifact',
                summary: 'This is summary\nSecond line',
                text: 'This is\na multiline text.\n**Test** some _markdown elements_.'
              }
            });

            core.setOutput("check-id", check.id);
        env:
          VERSION: ${{ steps.version.outputs.value }}
          HEAD_SHA: ${{ steps.pr-head.outputs.sha }}

      - name: üîí Tag Release
        id: tag
        run: |
          if [[ "${VERSION}" != *-SNAPSHOT ]]
          then
            TAG=v${VERSION}
            git tag ${TAG}
            git push origin ${TAG}
          fi
        env:
          VERSION: ${{ steps.version.outputs.value }}

      - name: üìö Publish
        id: publish
        run: |
          sleep 10
          echo "Publishing..."

      - name: üîì Untag Release if Failed
        if: always() && steps.tag.outcome == 'success' && steps.publish.outcome != 'success'
        run: |
          if [[ "${VERSION}" != *-SNAPSHOT ]]
          then
            TAG=v${VERSION}
            git tag --delete ${TAG}
            git push --delete origin ${TAG}
          fi
        env:
          VERSION: ${{ steps.version.outputs.value }}

      - name: üëç Successful Completion Notification (PR)
        uses: actions/github-script@v6
        if: always() && github.event_name == 'issue_comment' && steps.publish.outcome == 'success'
        with:
          script: |
            const version = process.env.VERSION;
            const tagText = version.endsWith("-SNAPSHOT") ? '' :
              `\nüè∑Ô∏è [v${version}](${context.payload.repository.html_url}/tree/v${version})`;
            const body = `üéâ Version ${version} published successfully.${tagText}`;

            github.rest.issues.updateComment({
                comment_id: process.env.COMMENT_ID,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            });

            github.rest.checks.update({
              check_run_id: process.env.CHECK_ID,
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed', 
              conclusion: 'success'
            });
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT_ID: ${{ steps.notify.outputs.comment-id }}
          CHECK_ID: ${{ steps.notify.outputs.check-id }}
          VERSION: ${{ steps.version.outputs.value }}

      - name: üëé Failed Completion Notification (PR)
        uses: actions/github-script@v6
        if: always() && github.event_name == 'issue_comment' && steps.publish.outcome != 'success'
        with:
          script: |
            const version = process.env.VERSION;
            const runId = process.env.GITHUB_RUN_ID;

            github.rest.issues.updateComment({
                comment_id: process.env.COMMENT_ID,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body:
                  `üö´ Version ${version} publishing failed.\n` +
                  `üèÉ [Action Run](${context.payload.repository.html_url}/actions/runs/${runId})`
            });

            github.rest.checks.update({
              check_run_id: process.env.CHECK_ID,
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed', 
              conclusion: '${{ steps.publish.outcome }}'
            });
        env:
          COMMENT_ID: ${{ steps.notify.outputs.comment-id }}
          CHECK_ID: ${{ steps.notify.outputs.check-id }}
          VERSION: ${{ steps.version.outputs.value }}
